module ins_decode(en, ir, mova, movb, movc, add, sub, 
		and1, not1, rsr, rsl, jmp, jz, jc, 
		in1, out1, nop, halt);
	input en;
	input [7:0] ir;
	output mova, movb, movc, add, sub, 
		and1, not1, rsr, rsl, jmp, jz, jc, 
		in1, out1, nop, halt;
	wire [7:0] ir;
	reg mova, movb, movc, add, sub, 
		and1, not1, rsr, rsl, jmp, jz, jc, 
		in1, out1, nop, halt;
	

	always @(en, ir, mova, movb, movc, add, sub, 
		and1, not1, rsr, rsl, jmp, jz, jc, 
		in1, out1, nop, halt)
	begin
		mova=1'b0; movb=1'b0; movc=1'b0; add=1'b0; sub=1'b0; 
		and1=1'b0; not1=1'b0; rsr=1'b0; rsl=1'b0; jmp=1'b0;
		jz=1'b0; jc=1'b0; in1=1'b0; out1=1'b0; nop=1'b0; halt=1'b0;
		if(en!=0)
			case(ir[7:4])
				4'b1100:begin
							if(ir[3:2]==2'b11)
							begin movb=1'b1;
							end
							else if(ir[1:0]==2'b11)
							begin movc=1'b1;
							end
							else
							begin mova=1'b1;
							end
						end
				4'b1010:begin
							if(ir[1:0]==2'b00) 
							begin rsr=1'b1;
							end
							else 
							begin rsl=1'b1;
							end
						end
						4'b0011:begin
									if (ir[3:0]==4'b0000) 
									begin jmp=1'b1;
									end 
									else if(ir[3:0]==4'b0001)
									begin jz=1'b1; 			
									end
									else 
									begin jc=1'b1; 
									end
								end
				4'b1001:begin add=1'b1;
						end
				4'b0110:begin sub=1'b1;
						end
				4'b1011:begin and1=1'b1; 
						end
				4'b0101:begin not1=1'b1; 
						end
				4'b0010:begin in1=1'b1;
						end
				4'b0100:begin out1=1'b1; 
						end
				4'b0111:begin  nop=1'b1;
						end
				4'b1000:begin halt=1'b1;
						end
				default:begin 
						end
			endcase
		else
		begin
		end
	end
endmodule
